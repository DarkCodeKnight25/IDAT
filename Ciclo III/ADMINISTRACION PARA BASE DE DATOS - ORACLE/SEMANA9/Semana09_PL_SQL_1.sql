
--EJEMPLO 1:
--Este procedimiento almacenado lleva como nombre SP_OPERACIONES_BASICAS,
--sin parámetros,  usa dos variables locales (después de IS)
--X de tipo numéricos e Y variable de tipo numérica con los valores 
--100 y 50 consecutivamente mente.

CREATE OR REPLACE PROCEDURE SP_OPERACIONES_BASICAS
IS
     X NUMBER:=100; Y NUMBER:=50;
BEGIN
   DBMS_OUTPUT.PUT_LINE ('==================================');   
   DBMS_OUTPUT.PUT_LINE ('OPERACIONS BASICAS');
   DBMS_OUTPUT.PUT_LINE ('==================================');   
   DBMS_OUTPUT.PUT_LINE ('SUMA           : ' || TO_CHAR(X+Y));
   DBMS_OUTPUT.PUT_LINE ('RESTA          : ' || TO_CHAR(X-Y));
   DBMS_OUTPUT.PUT_LINE ('MULTIPLICACION : ' || TO_CHAR(X*Y));
   DBMS_OUTPUT.PUT_LINE ('DIVISION       : ' || TO_CHAR(X/Y));
   DBMS_OUTPUT.PUT_LINE ('==================================');      
END;

--EL PROCEDIMIENTO ALMACENADO SE PRUEBA DESDE UN BLOQUE ANONIMO.
SET SERVEROUTPUT ON;
BEGIN
      SP_OPERACIONES_BASICAS;
END;

--EJEMPLO 2:
--Ejemplo Básico de Procedimiento Almacenado usando parámetros: 
--realiza las operaciones básicas entre dos valores y mostrar los resultados.

CREATE OR REPLACE PROCEDURE SP_OPERACIONES_BASICAS2
     (X IN NUMBER, Y IN NUMBER)
IS
BEGIN
   DBMS_OUTPUT.PUT_LINE ('==================================');   
   DBMS_OUTPUT.PUT_LINE ('OPERACIONS BASICAS');
   DBMS_OUTPUT.PUT_LINE ('==================================');   
   DBMS_OUTPUT.PUT_LINE ('SUMA           : ' || TO_CHAR(X+Y));
   DBMS_OUTPUT.PUT_LINE ('RESTA          : ' || TO_CHAR(X-Y));
   DBMS_OUTPUT.PUT_LINE ('MULTIPLICACION : ' || TO_CHAR(X*Y));
   DBMS_OUTPUT.PUT_LINE ('DIVISION       : ' || TO_CHAR(X/Y));
   DBMS_OUTPUT.PUT_LINE ('==================================');   
END;

--EL PROCEDIMIENTO ALMACENADO CON PARMETROS, SE PRUEBA DESDE UN BLOQUE ANONIMO.
SET SERVEROUTPUT ON;
DECLARE
      A NUMBER:= 100; B NUMBER:= 50;
BEGIN
      SP_OPERACIONES_BASICAS2 (A, B);
END;


--EJEMPLO 3:
--Ejemplo Básico de Procedimiento Almacenado usando parámetros de entrada y salida
--de valores (IN - OUT): realiza las operaciones básicas entre dos valores de entrada
--al procedimiento y una salida de datos como respuesta a los procesos,  
--mostrar los resultados.
CREATE OR REPLACE PROCEDURE SP_SUMA
     (X IN NUMBER, Y IN NUMBER, Z OUT NUMBER)
IS
BEGIN
    Z := X + Y ;
END;

CREATE OR REPLACE PROCEDURE SP_RESTA
     (X IN NUMBER, Y IN NUMBER, Z OUT NUMBER)
IS
BEGIN
    Z := X - Y ;
END;

CREATE OR REPLACE PROCEDURE SP_MULTIPLICACION
     (X IN NUMBER, Y IN NUMBER, Z OUT NUMBER)
IS
BEGIN
    Z := X * Y ;
END;

CREATE OR REPLACE PROCEDURE SP_DIVISION
     (X IN NUMBER, Y IN NUMBER, Z OUT NUMBER)
IS
BEGIN
    Z := X / Y ;
END;

CREATE OR REPLACE PROCEDURE SP_PRUEBA
     (A IN NUMBER, B IN NUMBER)
IS
     C NUMBER:=0;
BEGIN
   DBMS_OUTPUT.PUT_LINE ('==================================');   
   DBMS_OUTPUT.PUT_LINE ('OPERACIONS BASICAS');
   DBMS_OUTPUT.PUT_LINE ('==================================');   
   SP_SUMA(A, B, C);
   DBMS_OUTPUT.PUT_LINE ('SUMA           : ' || TO_CHAR(C));
   SP_RESTA(A, B, C);
   DBMS_OUTPUT.PUT_LINE ('RESTA          : ' || TO_CHAR(C));
   SP_MULTIPLICACION(A, B, C);
   DBMS_OUTPUT.PUT_LINE ('MULTIPLICACION : ' || TO_CHAR(C));
   SP_DIVISION(A, B, C);
   DBMS_OUTPUT.PUT_LINE ('DIVISION       : ' || TO_CHAR(C));
   DBMS_OUTPUT.PUT_LINE ('==================================');   
END;

--PRUEBA DEL PROCEDIMIENTO ALMACENADO
SET SERVEROUTPUT ON;
DECLARE
    P NUMBER:=100; Q NUMBER:=50;
BEGIN
    SP_PRUEBA (P, Q);
END;


--EJEMPLO 4:
--Ejemplo Básico de Procedimiento Almacenado usando parámetros de entrada/salida 
--de modalidad (IN OUT): donde se realiza la operación del área de un triángulo,
--con todos los parámetros de entrada/salida el procedimiento pueden recepcionar
--y remitir valores, mostrando los resultados.

CREATE OR REPLACE PROCEDURE AREA_TRIANGULO
     (BASE IN OUT NUMBER, ALTURA IN OUT NUMBER, AREAT IN OUT NUMBER)
IS
BEGIN
    AREAT := (BASE * ALTURA)/2;
END;

--Desde un bloque anónimo, probaremos el procedimiento almacenado
--SP_AREA_TRIANGULO que usa 3 parámetros, enviándole como argumentos, 
--los valores 100, 50 y 0 en una línea de declaración en las variables
--locales B, H, AREA.

SET SERVEROUTPUT ON;
DECLARE
    B NUMBER:=100; H NUMBER:=50; AREA NUMBER:=0;
BEGIN
    AREA_TRIANGULO(B, H, AREA);
    DBMS_OUTPUT.PUT_LINE ('==================================');
    DBMS_OUTPUT.PUT_LINE ('AREA DEL TRIANGULO'); 
    DBMS_OUTPUT.PUT_LINE ('=================================='); 
    DBMS_OUTPUT.PUT_LINE ('VALOR DE BASE      : ' || B); 
    DBMS_OUTPUT.PUT_LINE ('VALOR DE ALTURA    : ' || H); 
    DBMS_OUTPUT.PUT_LINE ('AREA DEL TRIANGULO : ' || AREA); 
END;


--EJEMPLO 5:
--Se desea crear un procedimiento almacenado, el cual permita el
--filtrado de libros, solicitándolas por el área del mismo libro
--y estas son: LPROG, ANALISIS, ARTE, LIDEREAZGO.

--PARA REALIZAR ESTE EJEMPLO SE DEBE CREAR LA SIGUIENTE TABLA E INSERTAR SUS REGISTROS.
CREATE TABLE LIBRO(
            CODLIB VARCHAR2(5) PRIMARY KEY NOT NULL,        
            TITULOLIB   VARCHAR2(32),        
            AUTORLIB    VARCHAR2(24),        
            EDITOLIB    VARCHAR2(13),        
            AREALIB     VARCHAR2(9),        
            PRECIOLIB   NUMERIC(8,2),    
            NHOJASLIB   INT,            
            ANOLIB      INT);

INSERT INTO LIBRO VALUES('1000','VISUAL FOX','RUBEN IGLESIAS','RAMA','LPROG',60,489,1997);
INSERT INTO LIBRO VALUES('1001','POWER BUILDER 6.','RAMIRO HOOL','UNI','LPROG',80,410,1999);
INSERT INTO LIBRO VALUES('1002','ANALISIS Y DISEÑO DE SIST.','KENDALL Y KENDALL','PRINTICE HALL','ANALISIS',100,913,1997);
INSERT INTO LIBRO VALUES('1003','POWER BUILDER 6.','WILLIAM B. HEYS','QUE','LPROG',150,843,1999);
INSERT INTO LIBRO VALUES('1004','VISUAL BASIC','CESAR BUSTAMANTE','GRAPPERU','LPROG',35,390,1997);
INSERT INTO LIBRO VALUES('1005','VISUAL FOX PRO','LES Y JHON PINTER','MC GRAWHILL','LPROG',25,567,1997);
INSERT INTO LIBRO VALUES('1006','GUIA C++','JULIO VASQUEZ PARAGULLAS','UPSMP','LPROG',50,780,1997);
INSERT INTO LIBRO VALUES('1007','MS C++','BECK ZARATIAN','MICROSOFT','LPROG',80,600,1999);
INSERT INTO LIBRO VALUES('1008','VISUAL FOX PRO 6.00','CESAR BUSTAMANTE','UNI','LPROG',35,450,1999);
INSERT INTO LIBRO VALUES('1009','AUTOCAD 2000','J.A. TAJADURA J. LOPEZ','MC GRAW HILL','CAD',40,480,1998);
INSERT INTO LIBRO VALUES('1010','EFECTOS COREL','ANOMINO','MACRO','ARTE',50,400,1998);
INSERT INTO LIBRO VALUES('1011','EL VENDEDOR MAS GRANDE DEL MUNDO','OG MANDINO','DIANA','LIDERAZGO',15,121,1968);
INSERT INTO LIBRO VALUES('1012','EL PODER DEL CARISMA','MIGUEL ANGEL CORNEJO','ESTRELLA','LIDERAZGO',15,123,1992);
INSERT INTO LIBRO VALUES('1013','7 HABITOS DE LA GENTE EFECTIVA','STEPHEN  R. COVER','PAIDOS','LIDERAZGO',50,460,1989);
INSERT INTO LIBRO VALUES('1014','CRITERIOS EVA. PROY.','NASSIR SAPAG CHAIN','MC GRAW HILL','PROYECTOS',10,144,1997);
INSERT INTO LIBRO VALUES('1015','COMO DIRIGIR MICRO EMP.','VICTOR ABAD G.','IPEDE','PROYECTOS',10,110,1995);
INSERT INTO LIBRO VALUES('1016','LA MAGIA DE PENSAR EN GRANDE','DAVID JASEPH SCHWRTZ','HERREROS MEX','LIDERAZGO',10,258,1960);
INSERT INTO LIBRO VALUES('1017','SQL SERVER VB','WILLIAM R. VAUGHN','MICROSOFT','LPROG',60,1000,1999);
INSERT INTO LIBRO VALUES('1018','VISUAL FOX 6.00','MENACHEN BAZIAN','QUE','LPROG',55,1000,1999);
INSERT INTO LIBRO VALUES('1019','INTELIGENCIA EMOCIONAL','DANIEL GOLEMAN','ZETA','LIDERAZGO',48,396,1996);
INSERT INTO LIBRO VALUES('1020','LA TERCERA OLA','ALVIN TOFFLER','MC GRAW HILL','LIDERAZGO',50,250,1998);
COMMIT;
--MOSTRANDO LOS DATOS DE LA TABLA LIBRO.
SELECT * FROM LIBRO;

--CREANDO EL PROCEDIMIENTO ALMACENADO SP_FILTRO_AREA
CREATE OR REPLACE PROCEDURE SP_FILTRO_AREA
     (AREA IN VARCHAR2)
IS
BEGIN
    DECLARE CURSOR FILTRO_1 IS (SELECT * FROM LIBRO
            WHERE AREALIB=AREA);
    A  LIBRO.CODLIB%TYPE;
    B  LIBRO.TITULOLIB%TYPE;
    C  LIBRO.AUTORLIB%TYPE;
    D  LIBRO.EDITOLIB%TYPE;
    E  LIBRO.AREALIB%TYPE;
    F  LIBRO.PRECIOLIB%TYPE;
    G  LIBRO.NHOJASLIB%TYPE; 
    H  LIBRO.ANOLIB%TYPE;
    BEGIN
        OPEN FILTRO_1;
        FETCH FILTRO_1 INTO A, B, C, D, E, F, G, H;
        WHILE FILTRO_1%FOUND
        LOOP
            DBMS_OUTPUT.PUT_LINE (A || ' - ' || B || ' - ' ||
                            C || ' - ' || D || ' - ' || E ||
                            ' - '  || F || ' - ' || G || ' - ' || H);
            FETCH FILTRO_1 INTO A, B, C, D, E, F, G, H;
        END LOOP;
        CLOSE FILTRO_1;
    END;
END;

--PROBANDO EL PROCEDIMIENTO ALMACENADO: SP_FILTRO_AREA
SET SERVEROUT ON;
BEGIN
        DBMS_OUTPUT.PUT_LINE('===================================');
        DBMS_OUTPUT.PUT_LINE('LIBROS DE LENGUAJE DE PROGRAMACION');
        DBMS_OUTPUT.PUT_LINE('===================================');
        SP_FILTRO_AREA ('LPROG');
        DBMS_OUTPUT.PUT_LINE('===================================');
        DBMS_OUTPUT.PUT_LINE('LIBROS DE ANALISIS');
        DBMS_OUTPUT.PUT_LINE('===================================');
        SP_FILTRO_AREA ('ANALISIS');
        DBMS_OUTPUT.PUT_LINE('===================================');
        DBMS_OUTPUT.PUT_LINE('LIBROS DE ARTE');
        DBMS_OUTPUT.PUT_LINE('===================================');
        SP_FILTRO_AREA ('ARTE');
        DBMS_OUTPUT.PUT_LINE('===================================');
        DBMS_OUTPUT.PUT_LINE('LIBROS DE LIDERAZGO');
        DBMS_OUTPUT.PUT_LINE('===================================');
        SP_FILTRO_AREA ('LIDERAZGO');
END;


--EJEMPLO 6:
--Si la tabla TRABAJADOR EXISTE favor de eliminarla.
DROP TABLE TRABAJADOR;

--Se tiene la tabla TRABAJADOR, con los siguientes datos:
CREATE TABLE TRABAJADOR ( 
    COD_TRA VARCHAR2 (5) NOT NULL,
    AP_TRA VARCHAR2 (15) NULL,
    AM_TRA VARCHAR2 (15) NULL,
    NOM_TRA VARCHAR2 (15) NULL,
    FECHA_NA DATE NULL,
    SUELDO NUMERIC (8,2) NULL,
    GENERO_TRA VARCHAR2 (1) NULL,
    AREA_TRA VARCHAR2 (30) NULL,
    PRIMARY KEY (COD_TRA));

INSERT INTO TRABAJADOR VALUES ('00001','DE LA MADRID','GUTIERREZ' , 'MARICIELO', '01/11/1980',980,'F','CONTABILIDAD');
INSERT INTO TRABAJADOR VALUES ('00002','HURTADO','CORONEL', 'NILDA', '10/10/1976',980.50,'F','CONTABILIDAD');
INSERT INTO TRABAJADOR VALUES ('00003','PAREDES','MARTINEZ','EDITH', '10/10/1976',1500.50,'F','SISTEMAS');
INSERT INTO TRABAJADOR VALUES ('00004','CARDOSO','VALLADARES','HENRY', '10/10/1980',1200.5,'M','SISTEMAS');
INSERT INTO TRABAJADOR VALUES('00005','UBILLUS','MARQUEZ','MIGUEL ANGEL', '05/01/1976',980.60,'M','CONTABILIDAD');
INSERT INTO TRABAJADOR VALUES('00006','LIZARRAGA','DEL OLMO','NUPCIA MASSIEL','05/10/1980',1300.70,'F','SISTEMAS');
INSERT INTO TRABAJADOR VALUES('00007','AGUIRRE','RIVADENEIRA','VANNIA', '05/10/1975',1200.10,'F','SISTEMAS');
INSERT INTO TRABAJADOR VALUES('00008','JUAREZ','LAZO','GINO','05/10/1969',1200.30,'M','LOGISTICA');
INSERT INTO TRABAJADOR VALUES('00009','PINTADO','ROBLES','JUAN ABEL', '28/08/1984',1000.50,'M','LOGISTICA');
INSERT INTO TRABAJADOR VALUES('00010','BARRANTES','MEDINA','LUIS ALBERTO','28/08/1975',1000.90,'M','LOGISTICA');
INSERT INTO TRABAJADOR VALUES ('00011','CAMPOS','GAMBO' , 'SONIA', '02/11/1980',NULL,'F','CONTABILIDAD');
INSERT INTO TRABAJADOR VALUES ('00012','HURTADO','SANCHEZ', 'SUSANA', '12/11/1976',980.50,'F','CONTABILIDAD');
INSERT INTO TRABAJADOR VALUES ('00013','CANTUR','GOMEZ','ELIZABETH', '12/10/1976',NULL,'F','SISTEMAS');
INSERT INTO TRABAJADOR VALUES ('00014','SALAS','CARPIO','ROBERT', '16/12/1982',1200.5,'M','SISTEMAS');
INSERT INTO TRABAJADOR VALUES('00015','UBILLUS','CAMPOS','MIGUEL', '15/04/1976',NULL,'M','CONTABILIDAD');
INSERT INTO TRABAJADOR VALUES('00016','SANCHEZ','DE LA CRUZ','LORENA','05/10/1980',1800.70,'F','SISTEMAS');
INSERT INTO TRABAJADOR VALUES('00017','GUTIERREZ','NAVARRO','CECILIA', '15/11/1979',NULL,'F','SISTEMAS');
INSERT INTO TRABAJADOR VALUES('00018','JUAREZ','SANTOS','MAGNO','15/12/1969',1600.50,'M','LOGISTICA');
INSERT INTO TRABAJADOR VALUES('00019','OROPEZA','ESTRADA','CARLOSL', '28/09/1985',NULL,'M','LOGISTICA');
INSERT INTO TRABAJADOR VALUES('00020','ESTRADA','CAMPOS','JUAN JOSE','18/05/1979',NULL,'M','LOGISTICA');
COMMIT;

SELECT * FROM TRABAJADOR;

--MEDIANTE UN PROCEDIMIENTO ALMACENADO SE DESEA ASIGNAR EL VALOR 1000
--A CADA PERSONA QUE NO TENGA SUELDO.
CREATE OR REPLACE PROCEDURE SP_ACTUALIZA_SUELDO 
      (CODIGO IN VARCHAR2)
IS
BEGIN
      DECLARE CURSOR FILTRO_2 IS (SELECT * FROM TRABAJADOR
                           WHERE COD_TRA = CODIGO);
      A TRABAJADOR.COD_TRA%TYPE;
      B TRABAJADOR.AP_TRA%TYPE;
      C TRABAJADOR.AM_TRA%TYPE;
      D TRABAJADOR.NOM_TRA%TYPE;
      E TRABAJADOR.FECHA_NA%TYPE;
      F TRABAJADOR.SUELDO%TYPE;
      G TRABAJADOR.GENERO_TRA%TYPE;
      H TRABAJADOR.AREA_TRA%TYPE;
      BEGIN
          OPEN FILTRO_2;
          FETCH FILTRO_2 INTO A, B, C, D, E, F, G, H;
          WHILE FILTRO_2%FOUND
          LOOP
             IF F IS NULL THEN
                UPDATE TRABAJADOR SET SUELDO=1000
                WHERE COD_TRA=A;
                COMMIT;
             END IF;
             FETCH FILTRO_2 INTO A, B, C, D, E, F, G, H;
          END LOOP;
          CLOSE FILTRO_2;
      END; 
END;

--Primero buscamos una persona que no tenga sueldo
SELECT * FROM TRABAJADOR WHERE SUELDO IS NULL;

--DESDE UN BLOQUEANONIMO.
--Probando el procedimiento almacenado, en este caso el 
--trabajador seleccionado es el que lleva el código 00015.
--Ahora se procede a cambiarle el sueldo por 1000.00

BEGIN
      SP_ACTUALIZA_SUELDO ('00015');
      DBMS_OUTPUT.PUT_LINE('SUELDO ACTUALIZADO');
END;

--VERIFIACNDO EL CAMBIO DE SUELDO DEL CODIGO '00015'
SELECT * FROM TRABAJADOR;


--EJEMPLO 7:
CREATE OR REPLACE FUNCTION OPERACION
            (A NUMBER, B NUMBER, OP NUMBER)
RETURN NUMBER
IS
     C NUMBER:=0;
BEGIN
     CASE  
        WHEN OP=1 THEN C:=A + B;
        WHEN OP=2 THEN C:=A - B;
        WHEN OP=3 THEN C:=A * B;
        WHEN OP=4 THEN C:=A / B;
        ELSE 
        DBMS_OUTPUT.PUT_LINE('UD. NO HA SELECCIONADO UNA OPERACIÓN CORRECTA');
     END CASE;                              
     RETURN C;
END;








